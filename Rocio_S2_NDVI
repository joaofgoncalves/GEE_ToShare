/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var pts = ee.FeatureCollection("users/joaofgo/pts_rocio");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var cloud_masks = require('users/fitoprincipe/geetools:cloud_masks');

//var pts = ee.FeatureCollection("users/joaofgo/pts_rocio");


var s2 = ee.ImageCollection("COPERNICUS/S2_SR").
  filterDate("2018-01-01", "2020-12-31").
  filterBounds(pts);


// Import the function to mask clouds and rename it
var cloudMask = cloud_masks.sentinel2();

// Create the masked cloud image collection
var s2_masked = s2.map(function(img) {return(cloudMask(img))});

print(s2_masked);


// Based on the masked dataset calculate NDVI for each image 
var ndviCol = s2_masked.map(
  function(img){
    var ndvi = img.normalizedDifference(['B8', 'B4'])
              .rename(['NDVI'])
              .set('system:index', img.get('system:index'))
              .set('system:time_start', img.get('system:time_start'))
              .set('system:time_end', img.get('system:time_end'));
    return(ndvi);
});

print("ndviCol", ndviCol);

  
// Extract data to focal point
var fill = function(img, ini) {
  // type cast
  var inift = ee.FeatureCollection(ini);

  // gets the values for the points in the current img
  var ft2 = img.reduceRegions(pts, ee.Reducer.mean(), 5);

  // gets the date of the img
  var date = img.date().format();

  // writes the date in each feature
  var ft3 = ft2.map(function(f){return f.set("date", date)});

  // merges the FeatureCollections
  return inift.merge(ft3);
};


var ndvi_tb = ee.FeatureCollection(ee.List([]));

var ndvi_ = ee.FeatureCollection(ndviCol.iterate(fill, ndvi_tb));

//print(ndvi_);

Export.table.toDrive(ndvi_,  
"S2_NDVI_RocioSamplePts",  
"GEE", 
"S2_NDVI_RocioSamplePts");

